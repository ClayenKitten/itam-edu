version: "3"

silent: true

tasks:
  default:
    cmds: [task --list]

  format:
    desc: Format the whole project
    cmd: npm run format

  check:
    desc: Check code in all packages
    cmd: npm run check --workspaces --if-present

  dev:
    desc: Basic development environment command
    cmds: ["docker compose -f ./compose.dev.yaml {{.CLI_ARGS}}"]

  dev:up:
    desc: Setup development environment
    cmd: |
      docker compose -f ./compose.dev.yaml up \
        --build \
        --no-attach gateway \
        --no-attach dbgate \
        --abort-on-container-failure \
        --watch \
        {{.CLI_ARGS}}
    ignore_error: true

  dev:down:
    desc: Stop development environment
    cmd: docker compose -f ./compose.dev.yaml down

  dev:drop:
    desc: Stop development environment and delete volumes
    prompt: Are you sure? It will remove all volumes, leading to full data loss.
    cmd: docker compose -f ./compose.dev.yaml down -v

  db:
    desc: Invoke dbmate
    dir: ./packages/db
    dotenv: ["./.env"]
    env:
      DBMATE_MIGRATIONS_DIR: "./migrations"
      DBMATE_SCHEMA_FILE: "./schema.sql"
      DBMATE_STRICT: "true"
    cmd: |
      export DATABASE_URL="postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@$POSTGRES_HOST/$POSTGRES_DB?sslmode=disable"
      echo "Connecting to database '$POSTGRES_DB' at '$POSTGRES_HOST' as '$POSTGRES_USER'"
      npx dbmate {{.CLI_ARGS}}
      npx kysely-codegen --out-file ./index.ts --camel-case --dialect postgres

  db:up:
    desc: Run database migrations
    cmd: { task: db, vars: { CLI_ARGS: up } }

  db:down:
    desc: Revert database migration
    cmd: { task: db, vars: { CLI_ARGS: down } }

  db:new:
    desc: Create new migration file. Name must be specified as argument.
    dir: ./packages/db
    env:
      DBMATE_MIGRATIONS_DIR: "./migrations"
    cmd: "npx dbmate new -- {{.CLI_ARGS}}"
