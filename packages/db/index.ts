/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from "kysely";

export type AttendanceFormat = "offline" | "online";

export type CourseRole = "admin" | "student" | "teacher";

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export type GlobalRole = "admin" | "default" | "supervisor";

export type Int8 = ColumnType<string, bigint | number | string, bigint | number | string>;

export type Json = JsonValue;

export type JsonArray = JsonValue[];

export type JsonObject = {
  [x: string]: JsonValue | undefined;
};

export type JsonPrimitive = boolean | number | string | null;

export type JsonValue = JsonArray | JsonObject | JsonPrimitive;

export type SemesterEnum = "autumn" | "spring";

export type Timestamp = ColumnType<Date, Date | string, Date | string>;

export interface CourseChanges {
  actorId: string;
  courseId: string;
  createdAt: Generated<Timestamp>;
  id: Generated<string>;
  payload: Json;
}

export interface Courses {
  about: Generated<string>;
  banner: string | null;
  cover: string | null;
  /**
   * Multi-line description of the course
   */
  description: string | null;
  icon: string | null;
  id: Generated<string>;
  isArchived: Generated<boolean>;
  isEnrollmentOpen: Generated<boolean>;
  isPublished: Generated<boolean>;
  ownerId: string;
  /**
   * Optional semester in which the course takes place
   */
  semester: SemesterEnum;
  /**
   * Machine-readable name of the course that is unique in combination with year and semester
   */
  slug: string;
  status: string | null;
  theme: Generated<string>;
  /**
   * Human-readable name of the course
   */
  title: string;
  /**
   * Year in which the course takes place
   */
  year: Generated<number>;
}

export interface Homeworks {
  acceptingSubmissionsOverride: boolean | null;
  content: string | null;
  courseId: string;
  createdAt: Generated<Timestamp>;
  deadline: Timestamp | null;
  id: Generated<string>;
  position: number;
  title: string;
}

export interface LessonAttendees {
  format: AttendanceFormat;
  lessonId: string;
  manuallyAddedBy: string | null;
  recordedAt: Generated<Timestamp>;
  userId: string;
}

export interface LessonHomeworks {
  homeworkId: string;
  lessonId: string;
}

export interface Lessons {
  /**
   * URL of the lesson icon
   */
  banner: string | null;
  /**
   * HTML content of the lesson
   */
  content: string | null;
  courseId: string;
  createdAt: Generated<Timestamp>;
  description: string | null;
  /**
   * Machine-readable name of the lesson that is unique within a course
   */
  id: Generated<string>;
  isOffline: boolean;
  isOnline: boolean;
  location: string | null;
  position: number;
  scheduledAt: Timestamp | null;
  /**
   * Human-readable name of the lesson
   */
  title: string;
  video: string | null;
}

export interface SchemaMigrations {
  version: string;
}

export interface SubmissionAttempts {
  content: string | null;
  files: string[];
  homeworkId: string;
  id: Generated<string>;
  sentAt: Generated<Timestamp>;
  studentId: string;
}

export interface SubmissionReviews {
  accepted: boolean;
  attemptId: string;
  content: string | null;
  files: string[];
  reviewerId: string | null;
  sentAt: Generated<Timestamp>;
}

export interface UserCourses {
  courseId: string;
  role: CourseRole;
  userId: string;
}

export interface Users {
  /**
   * URL of the user avatar
   */
  avatar: string | null;
  bio: string | null;
  email: string | null;
  firstName: string;
  id: Generated<string>;
  lastName: string | null;
  patronim: string | null;
  role: Generated<GlobalRole>;
  tgChatId: Int8;
  tgUserId: Int8;
  tgUsername: string;
}

export interface UserSessions {
  expires: Timestamp;
  id: Generated<string>;
  token: string;
  userId: string;
}

export interface DB {
  courseChanges: CourseChanges;
  courses: Courses;
  homeworks: Homeworks;
  lessonAttendees: LessonAttendees;
  lessonHomeworks: LessonHomeworks;
  lessons: Lessons;
  schemaMigrations: SchemaMigrations;
  submissionAttempts: SubmissionAttempts;
  submissionReviews: SubmissionReviews;
  userCourses: UserCourses;
  users: Users;
  userSessions: UserSessions;
}
