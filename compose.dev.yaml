# Development environment

services:
  gateway:
    image: caddy:2-alpine
    ports: [127.0.0.1:80:80, 127.0.0.1:443:443]
    volumes:
      - caddy_data:/data
      - caddy_config:/config
      - ./dev-environment:/srv/www:ro
    configs: [{ source: caddy, target: /etc/caddy/Caddyfile }]

  frontend:
    build: &build
      dockerfile: ./packages/frontend/Dockerfile
      context: .
      target: dev
    depends_on: [api]
    expose: [3000]
    volumes:
      [./packages/frontend/.svelte-kit:/app/packages/frontend/.svelte-kit]
    environment: &environment
      PUBLIC_ITAM_EDU_FRONTEND_API_URL_BROWSER: http://api.localhost
      PUBLIC_ITAM_EDU_FRONTEND_API_URL_SERVER: http://api:3000
      ITAM_EDU_API_HOST: 0.0.0.0
      ITAM_EDU_API_PORT: 3000
      ITAM_EDU_API_DB_CONNECTION_STRING: postgres://user:password@postgres:5432/app?sslmode=disable
      ITAM_EDU_API_REDIS_CONNECTION_STRING: redis://default@redis:6379
      ITAM_EDU_API_WEB_HOST: http://www.localhost
      ITAM_EDU_MEDIA_PORT: 3000
      ITAM_EDU_MEDIA_API_URL: http://api:3000
      ITAM_EDU_MEDIA_PREFIX: /media
    develop:
      watch:
        - action: sync
          path: ./packages/frontend
          target: /app/packages/frontend
          ignore: ["**/.svelte-kit/**"]
        - action: rebuild
          path: ./node_modules

  api:
    build: { <<: *build, dockerfile: ./packages/api/Dockerfile }
    expose: [3000]
    environment: *environment
    develop:
      watch:
        - { action: sync, path: ./packages/api, target: /app/packages/api }
        - { action: rebuild, path: ./node_modules }

  # Database
  ## PostgreSQL server
  postgres:
    image: postgres:17
    expose: [5432]
    ports: [127.0.0.1:5432:5432]
    shm_size: 128mb
    volumes: [postgres:/var/lib/postgresql/data]
    environment: &db_env
      POSTGRES_DB: app
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_HOST: postgres
    healthcheck:
      test: pg_isready --dbname="$$POSTGRES_DB" --username="$$POSTGRES_USER"
      interval: 5s
      timeout: 60s
      retries: 5
      start_period: 30s
      start_interval: 500ms

  ## Execute dbmate command (e.g. migrate database up or down)
  dbmate:
    build:
      context: ./packages/db
      dockerfile: ./dev.Dockerfile
      target: dbmate
    depends_on:
      postgres: { condition: service_healthy }
    volumes: [./packages/db/migrations:/app/migrations]
    environment:
      <<: *db_env
      ITAM_EDU_DB_COMMAND: "${ITAM_EDU_DB_COMMAND-up}"
    profiles: [dbmate]

  ## Codegen Typescript definitions from database schema
  kysely-codegen:
    build:
      context: ./packages/db
      dockerfile: ./dev.Dockerfile
      target: kysely-codegen
    depends_on:
      dbmate: { condition: service_completed_successfully }
    volumes: [./packages/db/index.ts:/app/index.ts]
    environment: *db_env
    profiles: [kysely-codegen]

  ## dbgate web interface for postgres
  dbgate:
    image: dbgate/dbgate:5.3.1-alpine
    expose: [3000]
    environment:
      CONNECTIONS: Database
      SIGNLE_CONNECTION: Database
      SINGLE_DATABASE: app

      LABEL_Database: Database
      ENGINE_Database: postgres@dbgate-plugin-postgres
      SERVER_Database: postgres
      PORT_Database: 5432
      DATABASE_Database: app
      USER_Database: user
      PASSWORD_Database: password
    volumes:
      - dbgate:/root/.dbgate

  # Redis
  redis:
    image: redis:7.4
    command: redis-server --save 60 1 --appendonly yes --loglevel notice
    expose: [6379]
    ports: [127.0.0.1:6379:6379]
    volumes: [redis:/root/redis]

  redis-insight:
    image: redis/redisinsight:2.66
    expose: [5540]
    depends_on: [redis]

  redis-insight-setup:
    image: curlimages/curl
    environment:
      HEADER: "Content-Type: application/json; charset=utf-8"
      PATH1: http://redis-insight:5540/api/databases
      DATA1: '{"host":"redis","name":"itam-edu","port":6379}'
      PATH2: http://redis-insight:5540/api/settings
      DATA2: '{"agreements":{"eula":true,"analytics": false,"notifications": false,"encryption": false}}'
    entrypoint: |
      sh -c "
        sleep 5 &&
        curl --fail-with-body -s -X 'POST' \"$$PATH1\" -H \"$$HEADER\" -d \"$$DATA1\" &&
        curl --fail-with-body -s -X 'PATCH' \"$$PATH2\" -H \"$$HEADER\" -d \"$$DATA2\"
      "
    depends_on: [redis-insight]

  # Media
  ## Proxy server (Caddy)
  media:
    build:
      context: ./packages/media
      dockerfile: ./Dockerfile
    depends_on: [api]
    expose: [3000]
    volumes: [./packages/media/data:/app/data]
    environment: *environment
    develop:
      watch:
        - action: rebuild
          path: ./packages/media/Caddyfile
          target: /app/packages/media

configs:
  caddy:
    content: |
      http://localhost {
          root * /srv/www
          file_server
      }
      http://www.localhost {
          handle /media* {
              reverse_proxy media:3000        
          }
          handle {
              reverse_proxy frontend:3000
          }
      }
      http://api.localhost {
          reverse_proxy api:3000
      }
      http://postgres.localhost {
          reverse_proxy dbgate:3000
      }
      http://redis.localhost {
          reverse_proxy redis-insight:5540
      }

volumes:
  postgres:
  dbgate:
  redis:
  caddy_data:
  caddy_config:
