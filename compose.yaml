# Production environment

services:
  gateway:
    image: caddy:2-alpine
    volumes: [caddy_data:/data, caddy_config:/config]
    ports: [80:80, 443:443]
    configs: [{ source: caddy, target: /etc/caddy/Caddyfile }]
    restart: unless-stopped

  web:
    image: ghcr.io/clayenkitten/itam-edu-web:latest
    build: &build
      dockerfile: ./packages/web/Dockerfile
      context: .
    depends_on: [api]
    expose: [3000]
    env_file: ./packages/web/.env
    environment: { ITAM_EDU_WEB_PORT: "3000" }
    restart: unless-stopped

  api:
    image: ghcr.io/clayenkitten/itam-edu-api:latest
    build: { <<: *build, dockerfile: ./packages/api/Dockerfile }
    depends_on: { db-migration: { condition: service_completed_successfully } }
    expose: [3000]
    env_file: ./packages/api/.env
    environment: { ITAM_EDU_API_PORT: "3000" }
    restart: unless-stopped

  # Database
  ## PostgreSQL server
  postgres:
    image: postgres:17
    expose: [5432]
    ports: [127.0.0.1:5432:5432]
    shm_size: 128mb
    restart: unless-stopped
    volumes: [postgres:/var/lib/postgresql/data]
    env_file: ./packages/db/.env
    healthcheck:
      test: pg_isready --dbname="$$POSTGRES_DB" --username="$$POSTGRES_USER"
      interval: 5s
      timeout: 60s
      retries: 5
      start_period: 30s
      start_interval: 500ms
  ## Database migration
  db-migration:
    image: ghcr.io/clayenkitten/itam-edu-db:latest
    build: ./packages/db
    depends_on: { postgres: { condition: service_healthy } }
    env_file: ./packages/db/.env
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3

  # Media
  ## Proxy server (Caddy)
  media:
    build:
      context: ./packages/media
      dockerfile: ./Dockerfile
    depends_on: [api]
    expose: [3000]
    environment: { ITAM_EDU_MEDIA_PORT: "3000" }

configs:
  caddy: { file: ./Caddyfile }

volumes:
  postgres:
  caddy_data:
  caddy_config:
  media:
